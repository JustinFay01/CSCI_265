Microsoft (R) Macro Assembler Version 14.35.32216.1	    04/04/23 12:58:30
example.asm						     Page 1 - 1


				; Fahrenheit to Celsius conversion
				; Mike Jipping
				; March 2017

				.586
				.MODEL FLAT

				INCLUDE io.h            ; header file for input/output
			      C ; IO.H -- header file for I/O macros (listing suppressed)
			      C .NOLIST      ; turn off listing
			      C .LIST        ; begin listing
			      C 

				.STACK 4096

				;--------------------------------------------------------------------------------------------
				; Declarations
				; Note that we declare a constant in a memory location (nine) for the idiv instruction

 00000000			.DATA
 00000000 00000000		fahren  DWORD   ?
 00000004 00000000		celsius DWORD   ?
 00000008 00000009		nine    DWORD   9
 0000000C 0000000A		ten     DWORD   10
 00000010 45 6E 74 65 72	prompt1 BYTE    "Enter the temperature in Farenheit", 0
	   20 74 68 65 20
	   74 65 6D 70 65
	   72 61 74 75 72
	   65 20 69 6E 20
	   46 61 72 65 6E
	   68 65 69 74 00
 00000033 54 68 65 20 43	prompt2 BYTE    "The Celsius temperature is"
	   65 6C 73 69 75
	   73 20 74 65 6D
	   70 65 72 61 74
	   75 72 65 20 69
	   73
 0000004D 00			digit1  BYTE     0
 0000004E 00			digit2  BYTE     0
 0000004F 20 64 65 67 72	prompt3 BYTE     " degrees", 0
	   65 65 73 00
 00000058  00000028 [		temp    BYTE    40 DUP (?)
	    00
	   ]
 00000080  0000000B [		celstr  BYTE    11 DUP (?), 0
	    00
	   ] 00

				;--------------------------------------------------------------------------------------------
				; Here's the actual code.

 00000000			.CODE
 00000000			_MainProc PROC
				        ; Input the farenheit temperature to the EAX register
				        ; Both "input" and "atod" are macros
				        input   prompt1, temp, 40
				        atod    temp            ; convert the string starting in "temp" to integer in EAX
 0000002D  A3 00000000 R	        mov     fahren, eax

				       ; Now convert the number in EAX to a string and output the data
				        ; Here is the tens digit.
 00000032  A1 00000000 R	        mov     eax, fahren
 00000037  83 E8 20		        sub     eax, 32         
 0000003A  6B C0 05		        imul    eax, 5
 0000003D  99			        cdq                     ; set up for division
 0000003E  F7 3D 00000008 R	        idiv    nine            ; use the memory containing constant in the instruction
 00000044  A3 00000004 R	        mov     celsius, eax    ; store the result

				        ; Here is the ones digit.  Note we use a "neg" instruction to subtract the tens
				        ; digit from the converted temperature
 00000049  99			        cdq
 0000004A  F7 3D 0000000C R	        idiv    ten
 00000050  83 C0 30		        add     eax, 48
 00000053  A2 0000004D R	        mov     digit1, al


 00000058  A1 00000004 R	        mov     eax, celsius
 0000005D  99			        cdq
 0000005E  F7 3D 0000000C R	        idiv    ten
 00000064  F7 2D 0000000C R	        imul    ten
 0000006A  F7 D8		        neg     eax
 0000006C  03 05 00000004 R	        add     eax, celsius
 00000072  83 C0 30		        add     eax, 48
 00000075  A2 0000004E R	        mov     digit2, al 
				        output  prompt2, prompt2 ; output 

				        ; Done! Return
 00000093  B8 00000000		        mov     eax, 0  ; exit with return code 0
 00000098  C3			        ret
 00000099			_MainProc ENDP
				END                             ; end of source code
Microsoft (R) Macro Assembler Version 14.35.32216.1	    04/04/23 12:58:30
example.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

atod . . . . . . . . . . . . . .	Proc
atow . . . . . . . . . . . . . .	Proc
dtoa . . . . . . . . . . . . . .	Proc
input  . . . . . . . . . . . . .	Proc
output . . . . . . . . . . . . .	Proc
wtoa . . . . . . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000008C Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000099 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

_MainProc  . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000099 Public


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
_getInput  . . . . . . . . . . .	L Near	 00000000 FLAT	External
_showOutput  . . . . . . . . . .	L Near	 00000000 FLAT	External
atodproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
atowproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
celsius  . . . . . . . . . . . .	DWord	 00000004 _DATA	
celstr . . . . . . . . . . . . .	Byte	 00000080 _DATA	
digit1 . . . . . . . . . . . . .	Byte	 0000004D _DATA	
digit2 . . . . . . . . . . . . .	Byte	 0000004E _DATA	
dtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
fahren . . . . . . . . . . . . .	DWord	 00000000 _DATA	
nine . . . . . . . . . . . . . .	DWord	 00000008 _DATA	
prompt1  . . . . . . . . . . . .	Byte	 00000010 _DATA	
prompt2  . . . . . . . . . . . .	Byte	 00000033 _DATA	
prompt3  . . . . . . . . . . . .	Byte	 0000004F _DATA	
temp . . . . . . . . . . . . . .	Byte	 00000058 _DATA	
ten  . . . . . . . . . . . . . .	DWord	 0000000C _DATA	
wtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External

	   0 Warnings
	   0 Errors
